# Pre-commit configuration for Go project
# See https://pre-commit.com for more information

repos:
  # golangci-lint official hooks
  - repo: https://github.com/golangci/golangci-lint
    rev: v2.3.0  # Use the latest stable version
    hooks:
      # Lint only changed files (fast, good for local development)
      - id: golangci-lint
        name: golangci-lint (changed files)
        description: Run golangci-lint on changed files only

      # Format all files in the repository
      - id: golangci-lint-fmt
        name: golangci-lint format
        description: Format all Go files using golangci-lint

      # Verify golangci-lint configuration
      - id: golangci-lint-config-verify
        name: golangci-lint config verify
        description: Verify .golangci.yml configuration file

  # Additional Go-specific hooks for comprehensive checks
  - repo: https://github.com/dnephin/pre-commit-golang
    rev: v0.5.1
    hooks:
      # Ensure go.mod is tidy
      - id: go-mod-tidy
        name: go mod tidy
        description: Ensure go.mod dependencies are up to date

      # Run Go unit tests on changed packages
      - id: go-unit-tests
        name: go unit tests
        description: Run Go unit tests for changed packages
        args: [-timeout=5m]

      # Check if project builds successfully
      - id: go-build
        name: go build
        description: Check if Go project builds successfully

  # General file checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v5.0.0
    hooks:
      # Check for files that would conflict with cross-platform usage
      - id: check-case-conflict
        name: check case conflict
        description: Check for files with case conflicts

      # Check for files that parse as valid YAML
      - id: check-yaml
        name: check yaml
        description: Check YAML files for syntax errors
        args: [--allow-multiple-documents]

      # Check for files that parse as valid JSON
      - id: check-json
        name: check json
        description: Check JSON files for syntax errors

      # Trim trailing whitespace
      - id: trailing-whitespace
        name: trim trailing whitespace
        description: Remove trailing whitespace
        args: [--markdown-linebreak-ext=md]

      # Ensure files end with newline
      - id: end-of-file-fixer
        name: fix end of files
        description: Ensure files end with a newline

      # Check for merge conflict markers
      - id: check-merge-conflict
        name: check merge conflict
        description: Check for merge conflict markers

# Global configuration
default_install_hook_types: [pre-commit, pre-push]
default_stages: [pre-commit]

# CI configuration - run more comprehensive checks on CI
ci:
    autofix_commit_msg: 'style: auto-fix pre-commit hooks'
    autoupdate_commit_msg: 'chore: pre-commit autoupdate'
    skip: []
    submodules: false
